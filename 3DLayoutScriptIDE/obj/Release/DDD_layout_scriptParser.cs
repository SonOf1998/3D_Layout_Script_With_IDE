//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\UnitySzakdolgozat1\3DLayoutScriptIDE\3DLayoutScriptIDE\DDD_layout_script.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace _3D_layout_script {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class DDD_layout_scriptParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, EQ=4, PLUS=5, PLUS_ASS=6, MINUS=7, MINUS_ASS=8, 
		MULT=9, MULT_ASS=10, DIV=11, DIV_ASS=12, MOD=13, COMMA=14, COLON=15, SEMI=16, 
		CURLY_O=17, CURLY_C=18, SQUARE_O=19, SQUARE_C=20, BRACKET_O=21, BRACKET_C=22, 
		FOR=23, IN=24, IF=25, ELSE=26, STEP=27, RANGE=28, INCLUDE=29, OBJECT_TYPE=30, 
		ATTR_GROUP=31, STRING=32, CONST=33, VAR=34, ID=35, TYPE=36, INT=37, FLOAT=38, 
		ATTRIBUTE=39, COMP_OP=40, WHITESPACE=41, BLOCK_COMMENT=42, LINE_COMMENT=43;
	public const int
		RULE_signed_id = 0, RULE_vec3 = 1, RULE_type_val = 2, RULE_binary_op = 3, 
		RULE_other_binary_op = 4, RULE_xyz = 5, RULE_modifiable_xyz = 6, RULE_simple_expression = 7, 
		RULE_simple_modifyable_exp = 8, RULE_operation_helper = 9, RULE_operation = 10, 
		RULE_variable_decl = 11, RULE_assign_statement = 12, RULE_attr = 13, RULE_attr_group = 14, 
		RULE_include_statement = 15, RULE_object_content = 16, RULE_object_block = 17, 
		RULE_if_condition = 18, RULE_if_content = 19, RULE_if_statement = 20, 
		RULE_else_if_statement = 21, RULE_else_statement = 22, RULE_for_loop_statement = 23, 
		RULE_range_and_step = 24, RULE_for_loop = 25, RULE_program_statement = 26, 
		RULE_program = 27;
	public static readonly string[] ruleNames = {
		"signed_id", "vec3", "type_val", "binary_op", "other_binary_op", "xyz", 
		"modifiable_xyz", "simple_expression", "simple_modifyable_exp", "operation_helper", 
		"operation", "variable_decl", "assign_statement", "attr", "attr_group", 
		"include_statement", "object_content", "object_block", "if_condition", 
		"if_content", "if_statement", "else_if_statement", "else_statement", "for_loop_statement", 
		"range_and_step", "for_loop", "program_statement", "program"
	};

	private static readonly string[] _LiteralNames = {
		null, "'.x'", "'.y'", "'.z'", "'='", "'+'", "'+='", "'-'", "'-='", "'*'", 
		"'*='", "'/'", "'/='", "'%'", "','", "':'", "';'", "'{'", "'}'", "'['", 
		"']'", "'('", "')'", "'for'", "'in'", "'if'", "'else'", "'step'", "'range'", 
		"'@include'", null, "'attr-group'", null, "'const'", "'var'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "EQ", "PLUS", "PLUS_ASS", "MINUS", "MINUS_ASS", 
		"MULT", "MULT_ASS", "DIV", "DIV_ASS", "MOD", "COMMA", "COLON", "SEMI", 
		"CURLY_O", "CURLY_C", "SQUARE_O", "SQUARE_C", "BRACKET_O", "BRACKET_C", 
		"FOR", "IN", "IF", "ELSE", "STEP", "RANGE", "INCLUDE", "OBJECT_TYPE", 
		"ATTR_GROUP", "STRING", "CONST", "VAR", "ID", "TYPE", "INT", "FLOAT", 
		"ATTRIBUTE", "COMP_OP", "WHITESPACE", "BLOCK_COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DDD_layout_script.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public DDD_layout_scriptParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class Signed_idContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(DDD_layout_scriptParser.ID, 0); }
		public Signed_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signed_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.EnterSigned_id(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.ExitSigned_id(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDDD_layout_scriptVisitor<TResult> typedVisitor = visitor as IDDD_layout_scriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSigned_id(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Signed_idContext signed_id() {
		Signed_idContext _localctx = new Signed_idContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_signed_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 56;
				_la = _input.La(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 59; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Vec3Context : ParserRuleContext {
		public ITerminalNode SQUARE_O() { return GetToken(DDD_layout_scriptParser.SQUARE_O, 0); }
		public OperationContext[] operation() {
			return GetRuleContexts<OperationContext>();
		}
		public OperationContext operation(int i) {
			return GetRuleContext<OperationContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(DDD_layout_scriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(DDD_layout_scriptParser.COMMA, i);
		}
		public ITerminalNode SQUARE_C() { return GetToken(DDD_layout_scriptParser.SQUARE_C, 0); }
		public Vec3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vec3; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.EnterVec3(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.ExitVec3(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDDD_layout_scriptVisitor<TResult> typedVisitor = visitor as IDDD_layout_scriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVec3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Vec3Context vec3() {
		Vec3Context _localctx = new Vec3Context(_ctx, State);
		EnterRule(_localctx, 2, RULE_vec3);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 61;
				_la = _input.La(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 64; Match(SQUARE_O);
			State = 65; operation();
			State = 66; Match(COMMA);
			State = 67; operation();
			State = 68; Match(COMMA);
			State = 69; operation();
			State = 70; Match(SQUARE_C);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_valContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(DDD_layout_scriptParser.INT, 0); }
		public ITerminalNode FLOAT() { return GetToken(DDD_layout_scriptParser.FLOAT, 0); }
		public Vec3Context vec3() {
			return GetRuleContext<Vec3Context>(0);
		}
		public Type_valContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_val; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.EnterType_val(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.ExitType_val(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDDD_layout_scriptVisitor<TResult> typedVisitor = visitor as IDDD_layout_scriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_val(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_valContext type_val() {
		Type_valContext _localctx = new Type_valContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_type_val);
		try {
			State = 75;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 72; Match(INT);
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 73; Match(FLOAT);
				}
				break;
			case PLUS:
			case MINUS:
			case SQUARE_O:
				EnterOuterAlt(_localctx, 3);
				{
				State = 74; vec3();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binary_opContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(DDD_layout_scriptParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(DDD_layout_scriptParser.MINUS, 0); }
		public ITerminalNode MULT() { return GetToken(DDD_layout_scriptParser.MULT, 0); }
		public ITerminalNode DIV() { return GetToken(DDD_layout_scriptParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(DDD_layout_scriptParser.MOD, 0); }
		public Binary_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.EnterBinary_op(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.ExitBinary_op(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDDD_layout_scriptVisitor<TResult> typedVisitor = visitor as IDDD_layout_scriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Binary_opContext binary_op() {
		Binary_opContext _localctx = new Binary_opContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_binary_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << MULT) | (1L << DIV) | (1L << MOD))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Other_binary_opContext : ParserRuleContext {
		public ITerminalNode PLUS_ASS() { return GetToken(DDD_layout_scriptParser.PLUS_ASS, 0); }
		public ITerminalNode MINUS_ASS() { return GetToken(DDD_layout_scriptParser.MINUS_ASS, 0); }
		public ITerminalNode MULT_ASS() { return GetToken(DDD_layout_scriptParser.MULT_ASS, 0); }
		public ITerminalNode DIV_ASS() { return GetToken(DDD_layout_scriptParser.DIV_ASS, 0); }
		public Other_binary_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_other_binary_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.EnterOther_binary_op(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.ExitOther_binary_op(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDDD_layout_scriptVisitor<TResult> typedVisitor = visitor as IDDD_layout_scriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOther_binary_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Other_binary_opContext other_binary_op() {
		Other_binary_opContext _localctx = new Other_binary_opContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_other_binary_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS_ASS) | (1L << MINUS_ASS) | (1L << MULT_ASS) | (1L << DIV_ASS))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XyzContext : ParserRuleContext {
		public Signed_idContext signed_id() {
			return GetRuleContext<Signed_idContext>(0);
		}
		public XyzContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xyz; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.EnterXyz(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.ExitXyz(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDDD_layout_scriptVisitor<TResult> typedVisitor = visitor as IDDD_layout_scriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXyz(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XyzContext xyz() {
		XyzContext _localctx = new XyzContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_xyz);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81; signed_id();
			State = 82;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Modifiable_xyzContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(DDD_layout_scriptParser.ID, 0); }
		public Modifiable_xyzContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifiable_xyz; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.EnterModifiable_xyz(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.ExitModifiable_xyz(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDDD_layout_scriptVisitor<TResult> typedVisitor = visitor as IDDD_layout_scriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifiable_xyz(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Modifiable_xyzContext modifiable_xyz() {
		Modifiable_xyzContext _localctx = new Modifiable_xyzContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_modifiable_xyz);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84; Match(ID);
			State = 85;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_expressionContext : ParserRuleContext {
		public Signed_idContext signed_id() {
			return GetRuleContext<Signed_idContext>(0);
		}
		public Type_valContext type_val() {
			return GetRuleContext<Type_valContext>(0);
		}
		public XyzContext xyz() {
			return GetRuleContext<XyzContext>(0);
		}
		public Simple_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.EnterSimple_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.ExitSimple_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDDD_layout_scriptVisitor<TResult> typedVisitor = visitor as IDDD_layout_scriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_expressionContext simple_expression() {
		Simple_expressionContext _localctx = new Simple_expressionContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_simple_expression);
		try {
			State = 90;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 87; signed_id();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 88; type_val();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 89; xyz();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_modifyable_expContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(DDD_layout_scriptParser.ID, 0); }
		public Modifiable_xyzContext modifiable_xyz() {
			return GetRuleContext<Modifiable_xyzContext>(0);
		}
		public Simple_modifyable_expContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_modifyable_exp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.EnterSimple_modifyable_exp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.ExitSimple_modifyable_exp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDDD_layout_scriptVisitor<TResult> typedVisitor = visitor as IDDD_layout_scriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_modifyable_exp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_modifyable_expContext simple_modifyable_exp() {
		Simple_modifyable_expContext _localctx = new Simple_modifyable_expContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_simple_modifyable_exp);
		try {
			State = 94;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 92; Match(ID);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 93; modifiable_xyz();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operation_helperContext : ParserRuleContext {
		public Simple_expressionContext simple_expression() {
			return GetRuleContext<Simple_expressionContext>(0);
		}
		public ITerminalNode BRACKET_O() { return GetToken(DDD_layout_scriptParser.BRACKET_O, 0); }
		public OperationContext operation() {
			return GetRuleContext<OperationContext>(0);
		}
		public ITerminalNode BRACKET_C() { return GetToken(DDD_layout_scriptParser.BRACKET_C, 0); }
		public Operation_helperContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operation_helper; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.EnterOperation_helper(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.ExitOperation_helper(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDDD_layout_scriptVisitor<TResult> typedVisitor = visitor as IDDD_layout_scriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperation_helper(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operation_helperContext operation_helper() {
		Operation_helperContext _localctx = new Operation_helperContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_operation_helper);
		try {
			State = 101;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case PLUS:
			case MINUS:
			case SQUARE_O:
			case ID:
			case INT:
			case FLOAT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 96; simple_expression();
				}
				break;
			case BRACKET_O:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 97; Match(BRACKET_O);
				State = 98; operation();
				State = 99; Match(BRACKET_C);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationContext : ParserRuleContext {
		public Operation_helperContext[] operation_helper() {
			return GetRuleContexts<Operation_helperContext>();
		}
		public Operation_helperContext operation_helper(int i) {
			return GetRuleContext<Operation_helperContext>(i);
		}
		public Binary_opContext[] binary_op() {
			return GetRuleContexts<Binary_opContext>();
		}
		public Binary_opContext binary_op(int i) {
			return GetRuleContext<Binary_opContext>(i);
		}
		public OperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.EnterOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.ExitOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDDD_layout_scriptVisitor<TResult> typedVisitor = visitor as IDDD_layout_scriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationContext operation() {
		OperationContext _localctx = new OperationContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_operation);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 103; operation_helper();
					State = 104; binary_op();
					}
					} 
				}
				State = 110;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
			}
			State = 111; operation_helper();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declContext : ParserRuleContext {
		public ITerminalNode VAR() { return GetToken(DDD_layout_scriptParser.VAR, 0); }
		public ITerminalNode ID() { return GetToken(DDD_layout_scriptParser.ID, 0); }
		public ITerminalNode SEMI() { return GetToken(DDD_layout_scriptParser.SEMI, 0); }
		public ITerminalNode CONST() { return GetToken(DDD_layout_scriptParser.CONST, 0); }
		public ITerminalNode COLON() { return GetToken(DDD_layout_scriptParser.COLON, 0); }
		public ITerminalNode TYPE() { return GetToken(DDD_layout_scriptParser.TYPE, 0); }
		public ITerminalNode EQ() { return GetToken(DDD_layout_scriptParser.EQ, 0); }
		public OperationContext operation() {
			return GetRuleContext<OperationContext>(0);
		}
		public Variable_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_decl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.EnterVariable_decl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.ExitVariable_decl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDDD_layout_scriptVisitor<TResult> typedVisitor = visitor as IDDD_layout_scriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declContext variable_decl() {
		Variable_declContext _localctx = new Variable_declContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_variable_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CONST) {
				{
				State = 113; Match(CONST);
				}
			}

			State = 116; Match(VAR);
			State = 117; Match(ID);
			State = 120;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COLON) {
				{
				State = 118; Match(COLON);
				State = 119; Match(TYPE);
				}
			}

			State = 124;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EQ) {
				{
				State = 122; Match(EQ);
				State = 123; operation();
				}
			}

			State = 126; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_statementContext : ParserRuleContext {
		public Simple_modifyable_expContext simple_modifyable_exp() {
			return GetRuleContext<Simple_modifyable_expContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(DDD_layout_scriptParser.EQ, 0); }
		public OperationContext operation() {
			return GetRuleContext<OperationContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(DDD_layout_scriptParser.SEMI, 0); }
		public Other_binary_opContext other_binary_op() {
			return GetRuleContext<Other_binary_opContext>(0);
		}
		public Assign_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.EnterAssign_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.ExitAssign_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDDD_layout_scriptVisitor<TResult> typedVisitor = visitor as IDDD_layout_scriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assign_statementContext assign_statement() {
		Assign_statementContext _localctx = new Assign_statementContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_assign_statement);
		try {
			State = 138;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 128; simple_modifyable_exp();
				State = 129; Match(EQ);
				State = 130; operation();
				State = 131; Match(SEMI);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 133; simple_modifyable_exp();
				State = 134; other_binary_op();
				State = 135; operation();
				State = 136; Match(SEMI);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrContext : ParserRuleContext {
		public ITerminalNode ATTRIBUTE() { return GetToken(DDD_layout_scriptParser.ATTRIBUTE, 0); }
		public ITerminalNode COLON() { return GetToken(DDD_layout_scriptParser.COLON, 0); }
		public OperationContext operation() {
			return GetRuleContext<OperationContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(DDD_layout_scriptParser.SEMI, 0); }
		public AttrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.EnterAttr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.ExitAttr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDDD_layout_scriptVisitor<TResult> typedVisitor = visitor as IDDD_layout_scriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttrContext attr() {
		AttrContext _localctx = new AttrContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_attr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140; Match(ATTRIBUTE);
			State = 141; Match(COLON);
			State = 142; operation();
			State = 143; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attr_groupContext : ParserRuleContext {
		public ITerminalNode ATTR_GROUP() { return GetToken(DDD_layout_scriptParser.ATTR_GROUP, 0); }
		public ITerminalNode BRACKET_O() { return GetToken(DDD_layout_scriptParser.BRACKET_O, 0); }
		public ITerminalNode STRING() { return GetToken(DDD_layout_scriptParser.STRING, 0); }
		public ITerminalNode BRACKET_C() { return GetToken(DDD_layout_scriptParser.BRACKET_C, 0); }
		public ITerminalNode CURLY_O() { return GetToken(DDD_layout_scriptParser.CURLY_O, 0); }
		public ITerminalNode CURLY_C() { return GetToken(DDD_layout_scriptParser.CURLY_C, 0); }
		public AttrContext[] attr() {
			return GetRuleContexts<AttrContext>();
		}
		public AttrContext attr(int i) {
			return GetRuleContext<AttrContext>(i);
		}
		public Attr_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attr_group; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.EnterAttr_group(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.ExitAttr_group(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDDD_layout_scriptVisitor<TResult> typedVisitor = visitor as IDDD_layout_scriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttr_group(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attr_groupContext attr_group() {
		Attr_groupContext _localctx = new Attr_groupContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_attr_group);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145; Match(ATTR_GROUP);
			State = 146; Match(BRACKET_O);
			State = 147; Match(STRING);
			State = 148; Match(BRACKET_C);
			State = 149; Match(CURLY_O);
			State = 151;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 150; attr();
				}
				}
				State = 153;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==ATTRIBUTE );
			State = 155; Match(CURLY_C);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Include_statementContext : ParserRuleContext {
		public ITerminalNode INCLUDE() { return GetToken(DDD_layout_scriptParser.INCLUDE, 0); }
		public ITerminalNode BRACKET_O() { return GetToken(DDD_layout_scriptParser.BRACKET_O, 0); }
		public ITerminalNode STRING() { return GetToken(DDD_layout_scriptParser.STRING, 0); }
		public ITerminalNode BRACKET_C() { return GetToken(DDD_layout_scriptParser.BRACKET_C, 0); }
		public ITerminalNode SEMI() { return GetToken(DDD_layout_scriptParser.SEMI, 0); }
		public Include_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_include_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.EnterInclude_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.ExitInclude_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDDD_layout_scriptVisitor<TResult> typedVisitor = visitor as IDDD_layout_scriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclude_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Include_statementContext include_statement() {
		Include_statementContext _localctx = new Include_statementContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_include_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157; Match(INCLUDE);
			State = 158; Match(BRACKET_O);
			State = 159; Match(STRING);
			State = 160; Match(BRACKET_C);
			State = 161; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_contentContext : ParserRuleContext {
		public Include_statementContext[] include_statement() {
			return GetRuleContexts<Include_statementContext>();
		}
		public Include_statementContext include_statement(int i) {
			return GetRuleContext<Include_statementContext>(i);
		}
		public AttrContext[] attr() {
			return GetRuleContexts<AttrContext>();
		}
		public AttrContext attr(int i) {
			return GetRuleContext<AttrContext>(i);
		}
		public Object_contentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_content; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.EnterObject_content(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.ExitObject_content(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDDD_layout_scriptVisitor<TResult> typedVisitor = visitor as IDDD_layout_scriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_content(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_contentContext object_content() {
		Object_contentContext _localctx = new Object_contentContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_object_content);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==INCLUDE) {
				{
				{
				State = 163; include_statement();
				}
				}
				State = 168;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 172;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==ATTRIBUTE) {
				{
				{
				State = 169; attr();
				}
				}
				State = 174;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_blockContext : ParserRuleContext {
		public ITerminalNode OBJECT_TYPE() { return GetToken(DDD_layout_scriptParser.OBJECT_TYPE, 0); }
		public ITerminalNode CURLY_O() { return GetToken(DDD_layout_scriptParser.CURLY_O, 0); }
		public Object_contentContext object_content() {
			return GetRuleContext<Object_contentContext>(0);
		}
		public ITerminalNode CURLY_C() { return GetToken(DDD_layout_scriptParser.CURLY_C, 0); }
		public Object_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.EnterObject_block(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.ExitObject_block(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDDD_layout_scriptVisitor<TResult> typedVisitor = visitor as IDDD_layout_scriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_blockContext object_block() {
		Object_blockContext _localctx = new Object_blockContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_object_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175; Match(OBJECT_TYPE);
			State = 176; Match(CURLY_O);
			State = 177; object_content();
			State = 178; Match(CURLY_C);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_conditionContext : ParserRuleContext {
		public ITerminalNode BRACKET_O() { return GetToken(DDD_layout_scriptParser.BRACKET_O, 0); }
		public OperationContext[] operation() {
			return GetRuleContexts<OperationContext>();
		}
		public OperationContext operation(int i) {
			return GetRuleContext<OperationContext>(i);
		}
		public ITerminalNode COMP_OP() { return GetToken(DDD_layout_scriptParser.COMP_OP, 0); }
		public ITerminalNode BRACKET_C() { return GetToken(DDD_layout_scriptParser.BRACKET_C, 0); }
		public If_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.EnterIf_condition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.ExitIf_condition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDDD_layout_scriptVisitor<TResult> typedVisitor = visitor as IDDD_layout_scriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_condition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_conditionContext if_condition() {
		If_conditionContext _localctx = new If_conditionContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_if_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180; Match(BRACKET_O);
			State = 181; operation();
			State = 182; Match(COMP_OP);
			State = 183; operation();
			State = 184; Match(BRACKET_C);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_contentContext : ParserRuleContext {
		public Variable_declContext variable_decl() {
			return GetRuleContext<Variable_declContext>(0);
		}
		public Assign_statementContext assign_statement() {
			return GetRuleContext<Assign_statementContext>(0);
		}
		public Object_blockContext object_block() {
			return GetRuleContext<Object_blockContext>(0);
		}
		public For_loopContext for_loop() {
			return GetRuleContext<For_loopContext>(0);
		}
		public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		public If_contentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_content; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.EnterIf_content(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.ExitIf_content(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDDD_layout_scriptVisitor<TResult> typedVisitor = visitor as IDDD_layout_scriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_content(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_contentContext if_content() {
		If_contentContext _localctx = new If_contentContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_if_content);
		try {
			State = 191;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case CONST:
			case VAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 186; variable_decl();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 187; assign_statement();
				}
				break;
			case OBJECT_TYPE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 188; object_block();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 189; for_loop();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 5);
				{
				State = 190; if_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(DDD_layout_scriptParser.IF, 0); }
		public If_conditionContext if_condition() {
			return GetRuleContext<If_conditionContext>(0);
		}
		public ITerminalNode CURLY_O() { return GetToken(DDD_layout_scriptParser.CURLY_O, 0); }
		public ITerminalNode CURLY_C() { return GetToken(DDD_layout_scriptParser.CURLY_C, 0); }
		public If_contentContext[] if_content() {
			return GetRuleContexts<If_contentContext>();
		}
		public If_contentContext if_content(int i) {
			return GetRuleContext<If_contentContext>(i);
		}
		public Else_if_statementContext[] else_if_statement() {
			return GetRuleContexts<Else_if_statementContext>();
		}
		public Else_if_statementContext else_if_statement(int i) {
			return GetRuleContext<Else_if_statementContext>(i);
		}
		public Else_statementContext else_statement() {
			return GetRuleContext<Else_statementContext>(0);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDDD_layout_scriptVisitor<TResult> typedVisitor = visitor as IDDD_layout_scriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_if_statement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 193; Match(IF);
			State = 194; if_condition();
			State = 195; Match(CURLY_O);
			State = 199;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FOR) | (1L << IF) | (1L << OBJECT_TYPE) | (1L << CONST) | (1L << VAR) | (1L << ID))) != 0)) {
				{
				{
				State = 196; if_content();
				}
				}
				State = 201;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 202; Match(CURLY_C);
			State = 206;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 203; else_if_statement();
					}
					} 
				}
				State = 208;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
			}
			State = 210;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ELSE) {
				{
				State = 209; else_statement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_if_statementContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(DDD_layout_scriptParser.ELSE, 0); }
		public ITerminalNode IF() { return GetToken(DDD_layout_scriptParser.IF, 0); }
		public If_conditionContext if_condition() {
			return GetRuleContext<If_conditionContext>(0);
		}
		public ITerminalNode CURLY_O() { return GetToken(DDD_layout_scriptParser.CURLY_O, 0); }
		public ITerminalNode CURLY_C() { return GetToken(DDD_layout_scriptParser.CURLY_C, 0); }
		public If_contentContext[] if_content() {
			return GetRuleContexts<If_contentContext>();
		}
		public If_contentContext if_content(int i) {
			return GetRuleContext<If_contentContext>(i);
		}
		public Else_if_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_if_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.EnterElse_if_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.ExitElse_if_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDDD_layout_scriptVisitor<TResult> typedVisitor = visitor as IDDD_layout_scriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_if_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_if_statementContext else_if_statement() {
		Else_if_statementContext _localctx = new Else_if_statementContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_else_if_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212; Match(ELSE);
			State = 213; Match(IF);
			State = 214; if_condition();
			State = 215; Match(CURLY_O);
			State = 219;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FOR) | (1L << IF) | (1L << OBJECT_TYPE) | (1L << CONST) | (1L << VAR) | (1L << ID))) != 0)) {
				{
				{
				State = 216; if_content();
				}
				}
				State = 221;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 222; Match(CURLY_C);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_statementContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(DDD_layout_scriptParser.ELSE, 0); }
		public ITerminalNode CURLY_O() { return GetToken(DDD_layout_scriptParser.CURLY_O, 0); }
		public ITerminalNode CURLY_C() { return GetToken(DDD_layout_scriptParser.CURLY_C, 0); }
		public If_contentContext[] if_content() {
			return GetRuleContexts<If_contentContext>();
		}
		public If_contentContext if_content(int i) {
			return GetRuleContext<If_contentContext>(i);
		}
		public Else_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.EnterElse_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.ExitElse_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDDD_layout_scriptVisitor<TResult> typedVisitor = visitor as IDDD_layout_scriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_statementContext else_statement() {
		Else_statementContext _localctx = new Else_statementContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_else_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224; Match(ELSE);
			State = 225; Match(CURLY_O);
			State = 229;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FOR) | (1L << IF) | (1L << OBJECT_TYPE) | (1L << CONST) | (1L << VAR) | (1L << ID))) != 0)) {
				{
				{
				State = 226; if_content();
				}
				}
				State = 231;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 232; Match(CURLY_C);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_loop_statementContext : ParserRuleContext {
		public Variable_declContext variable_decl() {
			return GetRuleContext<Variable_declContext>(0);
		}
		public Assign_statementContext assign_statement() {
			return GetRuleContext<Assign_statementContext>(0);
		}
		public Object_blockContext object_block() {
			return GetRuleContext<Object_blockContext>(0);
		}
		public For_loopContext for_loop() {
			return GetRuleContext<For_loopContext>(0);
		}
		public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		public For_loop_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_loop_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.EnterFor_loop_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.ExitFor_loop_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDDD_layout_scriptVisitor<TResult> typedVisitor = visitor as IDDD_layout_scriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_loop_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_loop_statementContext for_loop_statement() {
		For_loop_statementContext _localctx = new For_loop_statementContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_for_loop_statement);
		try {
			State = 239;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case CONST:
			case VAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 234; variable_decl();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 235; assign_statement();
				}
				break;
			case OBJECT_TYPE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 236; object_block();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 237; for_loop();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 5);
				{
				State = 238; if_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_and_stepContext : ParserRuleContext {
		public ITerminalNode RANGE() { return GetToken(DDD_layout_scriptParser.RANGE, 0); }
		public OperationContext[] operation() {
			return GetRuleContexts<OperationContext>();
		}
		public OperationContext operation(int i) {
			return GetRuleContext<OperationContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(DDD_layout_scriptParser.COMMA, 0); }
		public ITerminalNode BRACKET_O() { return GetToken(DDD_layout_scriptParser.BRACKET_O, 0); }
		public ITerminalNode SQUARE_O() { return GetToken(DDD_layout_scriptParser.SQUARE_O, 0); }
		public ITerminalNode BRACKET_C() { return GetToken(DDD_layout_scriptParser.BRACKET_C, 0); }
		public ITerminalNode SQUARE_C() { return GetToken(DDD_layout_scriptParser.SQUARE_C, 0); }
		public ITerminalNode STEP() { return GetToken(DDD_layout_scriptParser.STEP, 0); }
		public Range_and_stepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_and_step; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.EnterRange_and_step(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.ExitRange_and_step(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDDD_layout_scriptVisitor<TResult> typedVisitor = visitor as IDDD_layout_scriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange_and_step(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Range_and_stepContext range_and_step() {
		Range_and_stepContext _localctx = new Range_and_stepContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_range_and_step);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241; Match(RANGE);
			State = 242;
			_la = _input.La(1);
			if ( !(_la==SQUARE_O || _la==BRACKET_O) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 243; operation();
			State = 244; Match(COMMA);
			State = 245; operation();
			State = 246;
			_la = _input.La(1);
			if ( !(_la==SQUARE_C || _la==BRACKET_C) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 249;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==STEP) {
				{
				State = 247; Match(STEP);
				State = 248; operation();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_loopContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(DDD_layout_scriptParser.FOR, 0); }
		public ITerminalNode BRACKET_O() { return GetToken(DDD_layout_scriptParser.BRACKET_O, 0); }
		public ITerminalNode VAR() { return GetToken(DDD_layout_scriptParser.VAR, 0); }
		public ITerminalNode ID() { return GetToken(DDD_layout_scriptParser.ID, 0); }
		public ITerminalNode IN() { return GetToken(DDD_layout_scriptParser.IN, 0); }
		public Range_and_stepContext range_and_step() {
			return GetRuleContext<Range_and_stepContext>(0);
		}
		public ITerminalNode BRACKET_C() { return GetToken(DDD_layout_scriptParser.BRACKET_C, 0); }
		public ITerminalNode CURLY_O() { return GetToken(DDD_layout_scriptParser.CURLY_O, 0); }
		public ITerminalNode CURLY_C() { return GetToken(DDD_layout_scriptParser.CURLY_C, 0); }
		public For_loop_statementContext[] for_loop_statement() {
			return GetRuleContexts<For_loop_statementContext>();
		}
		public For_loop_statementContext for_loop_statement(int i) {
			return GetRuleContext<For_loop_statementContext>(i);
		}
		public For_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_loop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.EnterFor_loop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.ExitFor_loop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDDD_layout_scriptVisitor<TResult> typedVisitor = visitor as IDDD_layout_scriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_loopContext for_loop() {
		For_loopContext _localctx = new For_loopContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_for_loop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251; Match(FOR);
			State = 252; Match(BRACKET_O);
			State = 253; Match(VAR);
			State = 254; Match(ID);
			State = 255; Match(IN);
			State = 256; range_and_step();
			State = 257; Match(BRACKET_C);
			State = 258; Match(CURLY_O);
			State = 262;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FOR) | (1L << IF) | (1L << OBJECT_TYPE) | (1L << CONST) | (1L << VAR) | (1L << ID))) != 0)) {
				{
				{
				State = 259; for_loop_statement();
				}
				}
				State = 264;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 265; Match(CURLY_C);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Program_statementContext : ParserRuleContext {
		public Variable_declContext variable_decl() {
			return GetRuleContext<Variable_declContext>(0);
		}
		public Assign_statementContext assign_statement() {
			return GetRuleContext<Assign_statementContext>(0);
		}
		public Attr_groupContext attr_group() {
			return GetRuleContext<Attr_groupContext>(0);
		}
		public Object_blockContext object_block() {
			return GetRuleContext<Object_blockContext>(0);
		}
		public For_loopContext for_loop() {
			return GetRuleContext<For_loopContext>(0);
		}
		public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		public Program_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.EnterProgram_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.ExitProgram_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDDD_layout_scriptVisitor<TResult> typedVisitor = visitor as IDDD_layout_scriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Program_statementContext program_statement() {
		Program_statementContext _localctx = new Program_statementContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_program_statement);
		try {
			State = 273;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case CONST:
			case VAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 267; variable_decl();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 268; assign_statement();
				}
				break;
			case ATTR_GROUP:
				EnterOuterAlt(_localctx, 3);
				{
				State = 269; attr_group();
				}
				break;
			case OBJECT_TYPE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 270; object_block();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 5);
				{
				State = 271; for_loop();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 6);
				{
				State = 272; if_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramContext : ParserRuleContext {
		public Program_statementContext[] program_statement() {
			return GetRuleContexts<Program_statementContext>();
		}
		public Program_statementContext program_statement(int i) {
			return GetRuleContext<Program_statementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDDD_layout_scriptListener typedListener = listener as IDDD_layout_scriptListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDDD_layout_scriptVisitor<TResult> typedVisitor = visitor as IDDD_layout_scriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FOR) | (1L << IF) | (1L << OBJECT_TYPE) | (1L << ATTR_GROUP) | (1L << CONST) | (1L << VAR) | (1L << ID))) != 0)) {
				{
				{
				State = 275; program_statement();
				}
				}
				State = 280;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3-\x11C\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x3\x2\x5\x2<\n\x2\x3\x2\x3\x2\x3\x3\x5"+
		"\x3\x41\n\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3"+
		"\x4\x3\x4\x5\x4N\n\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\b\x3\b"+
		"\x3\b\x3\t\x3\t\x3\t\x5\t]\n\t\x3\n\x3\n\x5\n\x61\n\n\x3\v\x3\v\x3\v\x3"+
		"\v\x3\v\x5\vh\n\v\x3\f\x3\f\x3\f\a\fm\n\f\f\f\xE\fp\v\f\x3\f\x3\f\x3\r"+
		"\x5\ru\n\r\x3\r\x3\r\x3\r\x3\r\x5\r{\n\r\x3\r\x3\r\x5\r\x7F\n\r\x3\r\x3"+
		"\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x8D"+
		"\n\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x6\x10\x9A\n\x10\r\x10\xE\x10\x9B\x3\x10\x3\x10\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x12\a\x12\xA7\n\x12\f\x12\xE\x12\xAA\v"+
		"\x12\x3\x12\a\x12\xAD\n\x12\f\x12\xE\x12\xB0\v\x12\x3\x13\x3\x13\x3\x13"+
		"\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15"+
		"\x3\x15\x3\x15\x3\x15\x5\x15\xC2\n\x15\x3\x16\x3\x16\x3\x16\x3\x16\a\x16"+
		"\xC8\n\x16\f\x16\xE\x16\xCB\v\x16\x3\x16\x3\x16\a\x16\xCF\n\x16\f\x16"+
		"\xE\x16\xD2\v\x16\x3\x16\x5\x16\xD5\n\x16\x3\x17\x3\x17\x3\x17\x3\x17"+
		"\x3\x17\a\x17\xDC\n\x17\f\x17\xE\x17\xDF\v\x17\x3\x17\x3\x17\x3\x18\x3"+
		"\x18\x3\x18\a\x18\xE6\n\x18\f\x18\xE\x18\xE9\v\x18\x3\x18\x3\x18\x3\x19"+
		"\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\xF2\n\x19\x3\x1A\x3\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\xFC\n\x1A\x3\x1B\x3\x1B\x3\x1B"+
		"\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\a\x1B\x107\n\x1B\f\x1B\xE\x1B"+
		"\x10A\v\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5"+
		"\x1C\x114\n\x1C\x3\x1D\a\x1D\x117\n\x1D\f\x1D\xE\x1D\x11A\v\x1D\x3\x1D"+
		"\x2\x2\x2\x1E\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14"+
		"\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2"+
		"\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2\x2\b\x4\x2\a\a\t\t\a\x2\a\a\t\t\v"+
		"\v\r\r\xF\xF\x6\x2\b\b\n\n\f\f\xE\xE\x3\x2\x3\x5\x4\x2\x15\x15\x17\x17"+
		"\x4\x2\x16\x16\x18\x18\x124\x2;\x3\x2\x2\x2\x4@\x3\x2\x2\x2\x6M\x3\x2"+
		"\x2\x2\bO\x3\x2\x2\x2\nQ\x3\x2\x2\x2\fS\x3\x2\x2\x2\xEV\x3\x2\x2\x2\x10"+
		"\\\x3\x2\x2\x2\x12`\x3\x2\x2\x2\x14g\x3\x2\x2\x2\x16n\x3\x2\x2\x2\x18"+
		"t\x3\x2\x2\x2\x1A\x8C\x3\x2\x2\x2\x1C\x8E\x3\x2\x2\x2\x1E\x93\x3\x2\x2"+
		"\x2 \x9F\x3\x2\x2\x2\"\xA8\x3\x2\x2\x2$\xB1\x3\x2\x2\x2&\xB6\x3\x2\x2"+
		"\x2(\xC1\x3\x2\x2\x2*\xC3\x3\x2\x2\x2,\xD6\x3\x2\x2\x2.\xE2\x3\x2\x2\x2"+
		"\x30\xF1\x3\x2\x2\x2\x32\xF3\x3\x2\x2\x2\x34\xFD\x3\x2\x2\x2\x36\x113"+
		"\x3\x2\x2\x2\x38\x118\x3\x2\x2\x2:<\t\x2\x2\x2;:\x3\x2\x2\x2;<\x3\x2\x2"+
		"\x2<=\x3\x2\x2\x2=>\a%\x2\x2>\x3\x3\x2\x2\x2?\x41\t\x2\x2\x2@?\x3\x2\x2"+
		"\x2@\x41\x3\x2\x2\x2\x41\x42\x3\x2\x2\x2\x42\x43\a\x15\x2\x2\x43\x44\x5"+
		"\x16\f\x2\x44\x45\a\x10\x2\x2\x45\x46\x5\x16\f\x2\x46G\a\x10\x2\x2GH\x5"+
		"\x16\f\x2HI\a\x16\x2\x2I\x5\x3\x2\x2\x2JN\a\'\x2\x2KN\a(\x2\x2LN\x5\x4"+
		"\x3\x2MJ\x3\x2\x2\x2MK\x3\x2\x2\x2ML\x3\x2\x2\x2N\a\x3\x2\x2\x2OP\t\x3"+
		"\x2\x2P\t\x3\x2\x2\x2QR\t\x4\x2\x2R\v\x3\x2\x2\x2ST\x5\x2\x2\x2TU\t\x5"+
		"\x2\x2U\r\x3\x2\x2\x2VW\a%\x2\x2WX\t\x5\x2\x2X\xF\x3\x2\x2\x2Y]\x5\x2"+
		"\x2\x2Z]\x5\x6\x4\x2[]\x5\f\a\x2\\Y\x3\x2\x2\x2\\Z\x3\x2\x2\x2\\[\x3\x2"+
		"\x2\x2]\x11\x3\x2\x2\x2^\x61\a%\x2\x2_\x61\x5\xE\b\x2`^\x3\x2\x2\x2`_"+
		"\x3\x2\x2\x2\x61\x13\x3\x2\x2\x2\x62h\x5\x10\t\x2\x63\x64\a\x17\x2\x2"+
		"\x64\x65\x5\x16\f\x2\x65\x66\a\x18\x2\x2\x66h\x3\x2\x2\x2g\x62\x3\x2\x2"+
		"\x2g\x63\x3\x2\x2\x2h\x15\x3\x2\x2\x2ij\x5\x14\v\x2jk\x5\b\x5\x2km\x3"+
		"\x2\x2\x2li\x3\x2\x2\x2mp\x3\x2\x2\x2nl\x3\x2\x2\x2no\x3\x2\x2\x2oq\x3"+
		"\x2\x2\x2pn\x3\x2\x2\x2qr\x5\x14\v\x2r\x17\x3\x2\x2\x2su\a#\x2\x2ts\x3"+
		"\x2\x2\x2tu\x3\x2\x2\x2uv\x3\x2\x2\x2vw\a$\x2\x2wz\a%\x2\x2xy\a\x11\x2"+
		"\x2y{\a&\x2\x2zx\x3\x2\x2\x2z{\x3\x2\x2\x2{~\x3\x2\x2\x2|}\a\x6\x2\x2"+
		"}\x7F\x5\x16\f\x2~|\x3\x2\x2\x2~\x7F\x3\x2\x2\x2\x7F\x80\x3\x2\x2\x2\x80"+
		"\x81\a\x12\x2\x2\x81\x19\x3\x2\x2\x2\x82\x83\x5\x12\n\x2\x83\x84\a\x6"+
		"\x2\x2\x84\x85\x5\x16\f\x2\x85\x86\a\x12\x2\x2\x86\x8D\x3\x2\x2\x2\x87"+
		"\x88\x5\x12\n\x2\x88\x89\x5\n\x6\x2\x89\x8A\x5\x16\f\x2\x8A\x8B\a\x12"+
		"\x2\x2\x8B\x8D\x3\x2\x2\x2\x8C\x82\x3\x2\x2\x2\x8C\x87\x3\x2\x2\x2\x8D"+
		"\x1B\x3\x2\x2\x2\x8E\x8F\a)\x2\x2\x8F\x90\a\x11\x2\x2\x90\x91\x5\x16\f"+
		"\x2\x91\x92\a\x12\x2\x2\x92\x1D\x3\x2\x2\x2\x93\x94\a!\x2\x2\x94\x95\a"+
		"\x17\x2\x2\x95\x96\a\"\x2\x2\x96\x97\a\x18\x2\x2\x97\x99\a\x13\x2\x2\x98"+
		"\x9A\x5\x1C\xF\x2\x99\x98\x3\x2\x2\x2\x9A\x9B\x3\x2\x2\x2\x9B\x99\x3\x2"+
		"\x2\x2\x9B\x9C\x3\x2\x2\x2\x9C\x9D\x3\x2\x2\x2\x9D\x9E\a\x14\x2\x2\x9E"+
		"\x1F\x3\x2\x2\x2\x9F\xA0\a\x1F\x2\x2\xA0\xA1\a\x17\x2\x2\xA1\xA2\a\"\x2"+
		"\x2\xA2\xA3\a\x18\x2\x2\xA3\xA4\a\x12\x2\x2\xA4!\x3\x2\x2\x2\xA5\xA7\x5"+
		" \x11\x2\xA6\xA5\x3\x2\x2\x2\xA7\xAA\x3\x2\x2\x2\xA8\xA6\x3\x2\x2\x2\xA8"+
		"\xA9\x3\x2\x2\x2\xA9\xAE\x3\x2\x2\x2\xAA\xA8\x3\x2\x2\x2\xAB\xAD\x5\x1C"+
		"\xF\x2\xAC\xAB\x3\x2\x2\x2\xAD\xB0\x3\x2\x2\x2\xAE\xAC\x3\x2\x2\x2\xAE"+
		"\xAF\x3\x2\x2\x2\xAF#\x3\x2\x2\x2\xB0\xAE\x3\x2\x2\x2\xB1\xB2\a \x2\x2"+
		"\xB2\xB3\a\x13\x2\x2\xB3\xB4\x5\"\x12\x2\xB4\xB5\a\x14\x2\x2\xB5%\x3\x2"+
		"\x2\x2\xB6\xB7\a\x17\x2\x2\xB7\xB8\x5\x16\f\x2\xB8\xB9\a*\x2\x2\xB9\xBA"+
		"\x5\x16\f\x2\xBA\xBB\a\x18\x2\x2\xBB\'\x3\x2\x2\x2\xBC\xC2\x5\x18\r\x2"+
		"\xBD\xC2\x5\x1A\xE\x2\xBE\xC2\x5$\x13\x2\xBF\xC2\x5\x34\x1B\x2\xC0\xC2"+
		"\x5*\x16\x2\xC1\xBC\x3\x2\x2\x2\xC1\xBD\x3\x2\x2\x2\xC1\xBE\x3\x2\x2\x2"+
		"\xC1\xBF\x3\x2\x2\x2\xC1\xC0\x3\x2\x2\x2\xC2)\x3\x2\x2\x2\xC3\xC4\a\x1B"+
		"\x2\x2\xC4\xC5\x5&\x14\x2\xC5\xC9\a\x13\x2\x2\xC6\xC8\x5(\x15\x2\xC7\xC6"+
		"\x3\x2\x2\x2\xC8\xCB\x3\x2\x2\x2\xC9\xC7\x3\x2\x2\x2\xC9\xCA\x3\x2\x2"+
		"\x2\xCA\xCC\x3\x2\x2\x2\xCB\xC9\x3\x2\x2\x2\xCC\xD0\a\x14\x2\x2\xCD\xCF"+
		"\x5,\x17\x2\xCE\xCD\x3\x2\x2\x2\xCF\xD2\x3\x2\x2\x2\xD0\xCE\x3\x2\x2\x2"+
		"\xD0\xD1\x3\x2\x2\x2\xD1\xD4\x3\x2\x2\x2\xD2\xD0\x3\x2\x2\x2\xD3\xD5\x5"+
		".\x18\x2\xD4\xD3\x3\x2\x2\x2\xD4\xD5\x3\x2\x2\x2\xD5+\x3\x2\x2\x2\xD6"+
		"\xD7\a\x1C\x2\x2\xD7\xD8\a\x1B\x2\x2\xD8\xD9\x5&\x14\x2\xD9\xDD\a\x13"+
		"\x2\x2\xDA\xDC\x5(\x15\x2\xDB\xDA\x3\x2\x2\x2\xDC\xDF\x3\x2\x2\x2\xDD"+
		"\xDB\x3\x2\x2\x2\xDD\xDE\x3\x2\x2\x2\xDE\xE0\x3\x2\x2\x2\xDF\xDD\x3\x2"+
		"\x2\x2\xE0\xE1\a\x14\x2\x2\xE1-\x3\x2\x2\x2\xE2\xE3\a\x1C\x2\x2\xE3\xE7"+
		"\a\x13\x2\x2\xE4\xE6\x5(\x15\x2\xE5\xE4\x3\x2\x2\x2\xE6\xE9\x3\x2\x2\x2"+
		"\xE7\xE5\x3\x2\x2\x2\xE7\xE8\x3\x2\x2\x2\xE8\xEA\x3\x2\x2\x2\xE9\xE7\x3"+
		"\x2\x2\x2\xEA\xEB\a\x14\x2\x2\xEB/\x3\x2\x2\x2\xEC\xF2\x5\x18\r\x2\xED"+
		"\xF2\x5\x1A\xE\x2\xEE\xF2\x5$\x13\x2\xEF\xF2\x5\x34\x1B\x2\xF0\xF2\x5"+
		"*\x16\x2\xF1\xEC\x3\x2\x2\x2\xF1\xED\x3\x2\x2\x2\xF1\xEE\x3\x2\x2\x2\xF1"+
		"\xEF\x3\x2\x2\x2\xF1\xF0\x3\x2\x2\x2\xF2\x31\x3\x2\x2\x2\xF3\xF4\a\x1E"+
		"\x2\x2\xF4\xF5\t\x6\x2\x2\xF5\xF6\x5\x16\f\x2\xF6\xF7\a\x10\x2\x2\xF7"+
		"\xF8\x5\x16\f\x2\xF8\xFB\t\a\x2\x2\xF9\xFA\a\x1D\x2\x2\xFA\xFC\x5\x16"+
		"\f\x2\xFB\xF9\x3\x2\x2\x2\xFB\xFC\x3\x2\x2\x2\xFC\x33\x3\x2\x2\x2\xFD"+
		"\xFE\a\x19\x2\x2\xFE\xFF\a\x17\x2\x2\xFF\x100\a$\x2\x2\x100\x101\a%\x2"+
		"\x2\x101\x102\a\x1A\x2\x2\x102\x103\x5\x32\x1A\x2\x103\x104\a\x18\x2\x2"+
		"\x104\x108\a\x13\x2\x2\x105\x107\x5\x30\x19\x2\x106\x105\x3\x2\x2\x2\x107"+
		"\x10A\x3\x2\x2\x2\x108\x106\x3\x2\x2\x2\x108\x109\x3\x2\x2\x2\x109\x10B"+
		"\x3\x2\x2\x2\x10A\x108\x3\x2\x2\x2\x10B\x10C\a\x14\x2\x2\x10C\x35\x3\x2"+
		"\x2\x2\x10D\x114\x5\x18\r\x2\x10E\x114\x5\x1A\xE\x2\x10F\x114\x5\x1E\x10"+
		"\x2\x110\x114\x5$\x13\x2\x111\x114\x5\x34\x1B\x2\x112\x114\x5*\x16\x2"+
		"\x113\x10D\x3\x2\x2\x2\x113\x10E\x3\x2\x2\x2\x113\x10F\x3\x2\x2\x2\x113"+
		"\x110\x3\x2\x2\x2\x113\x111\x3\x2\x2\x2\x113\x112\x3\x2\x2\x2\x114\x37"+
		"\x3\x2\x2\x2\x115\x117\x5\x36\x1C\x2\x116\x115\x3\x2\x2\x2\x117\x11A\x3"+
		"\x2\x2\x2\x118\x116\x3\x2\x2\x2\x118\x119\x3\x2\x2\x2\x119\x39\x3\x2\x2"+
		"\x2\x11A\x118\x3\x2\x2\x2\x1B;@M\\`gntz~\x8C\x9B\xA8\xAE\xC1\xC9\xD0\xD4"+
		"\xDD\xE7\xF1\xFB\x108\x113\x118";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace _3D_layout_script
